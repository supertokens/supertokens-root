buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id "com.diffplug.spotless" version "5.15.2"
    id "org.ec4j.editorconfig" version "0.1.0"
    id "java"
}

repositories {
    mavenCentral()
}

dependencies {

}

spotless {
    // optional: limit format enforcement to just the files changed by this feature branch
//   ratchetFrom 'origin/master'

    format 'misc', {
        // define the files to apply `misc` to
        target '*.gradle', '*.md', '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces() // or tabs. Takes an integer argument if you don't like 4
        endWithNewline()
    }
    java {
        // Inferring targets won't work here
        target '**/*.java'
        // apply a specific flavor of google-java-format
        // googleJavaFormat('1.8').aosp().reflowLongStrings()
        // make sure every file has the following copyright header.
        // optionally, Spotless can set copyright years by digging
        // through git history (see "license" section below)
        // licenseHeader '/* (C)$YEAR */'
    }
}

tasks.register('generateDependenciesJson') {
    doLast {
        def jsonOutput = "["
        configurations.compileClasspath.resolvedConfiguration.firstLevelModuleDependencies.each { dep ->
            def addToJson
            addToJson = { resolvedDep ->
                jsonOutput += "\n{"
                jsonOutput += "\"groupId\":\"${resolvedDep.module.id.group}\",\"artifactId\":\"${resolvedDep.module.id.name}\",\"version\":\"${resolvedDep.module.id.version}\",\"file\":\"${resolvedDep.getModuleArtifacts()[0].file}\""
                jsonOutput += ",\"dependencies\":["
                if (resolvedDep.children.size() != 0) {
                    resolvedDep.children.each { childResolvedDep ->
                        if (resolvedDep in childResolvedDep.getParents() && childResolvedDep.getConfiguration() == 'compile') {
                            addToJson(childResolvedDep)
                        }
                    }
                    if (jsonOutput[-1] == ',') {
                        jsonOutput = jsonOutput[0..-2]
                    }
                }
                jsonOutput += "]},"
            }
            addToJson(dep)
        }
        if (jsonOutput[-1] == ',') {
            jsonOutput = jsonOutput[0..-2]
        }
        jsonOutput += "]"
        println jsonOutput
    }
}

tasks.register('getURLDeps') {
    doFirst {
        println("doing something")
        configurations.compileClasspath.incoming.resolutionResult.allDependencies.each { dependency ->
            println("dependency: " + dependency.requested)
            for (ArtifactRepository repository : repositories.asList()) {
                def url = repository.properties.get('url')
                println(url)
                //https://repo.maven.apache.org/maven2/com/google/code/gson/gson/2.8.6/gson-2.8.6.jar
                def jarUrl = String.format("%s%s/%s/%s/%s-%s.jar", url.toString(),
                        dependency.group.replace('.', '/'), dependency.name, dependency.version,
                        dependency.name, dependency.version)
                try {
                    def jarfile = new URL(jarUrl)
                    def inStream = jarfile.openStream();
                    if (inStream != null) {
                        println(String.format("%s:%s:%s", dependency.group, dependency.name, dependency.version)
                                + " -> " + jarUrl)
                        return
                    }
                } catch (Exception ignored) {
                    println(ignored.getMessage())
                }
            }
        }
    }
}

tasks.register('printDepsTreeInJson') {
    doLast {
        configurations.compileClasspath.incoming.resolutionResult.allDependencies.each { depResult ->
            def from = depResult.from
            def requested = depResult.requested

            println groovy.json.JsonOutput.toJson([
                    from     : from.toString(),
                    requested: requested.toString()
            ])
        }
    }
}

gradle.projectsEvaluated {
    subprojects {
        test {
            filter {
                setFailOnNoMatchingTests(false)
            }
        }
    }
}
