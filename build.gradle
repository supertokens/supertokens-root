buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id "com.diffplug.spotless" version "5.15.2"
    id "org.ec4j.editorconfig" version "0.1.0"
    id "java"
}

repositories {
    mavenCentral()
}

dependencies {

}

subprojects {
    tasks.register('generateDependenciesJson') {
        group = 'supertokens'
        shouldRunAfter("build")
        description = 'Generates a JSON file containing the list of implementation dependencies URLs for the actual (sub)project.'
        outputs.file("${layout.projectDirectory}/dependencies.json")
        doLast {
            def jsonOutput = "{\n\"_comment\": \"Contains list of implementation dependencies URL for this project. " +
                    "This is a generated file, don't modify the contents by hand." +
                    "\",\n" +
                    "\"list\": ["
            configurations.compileClasspath.resolvedConfiguration.firstLevelModuleDependencies.each { dep ->
                def addToJson
                addToJson = { resolvedDep ->
                    for (ArtifactRepository repository : repositories.asList()) {
                        def url = repository.properties.get('url')
                        def jarUrl = String.format("%s%s/%s/%s/%s-%s.jar", url.toString(),
                                resolvedDep.module.id.group.replace('.', '/'), resolvedDep.module.id.name, resolvedDep.
                                module.id.version,
                                resolvedDep.module.id.name, resolvedDep.module.id.version)
                        def sourceUrl = String.format("%s%s/%s/%s/%s-%s-sources.jar", url.toString(),
                                resolvedDep.module.id.group.replace('.', '/'), resolvedDep.module.id.name, resolvedDep.
                                module.id.version,
                                resolvedDep.module.id.name, resolvedDep.module.id.version)
                        try {
                            def jarfile = new URL(jarUrl)
                            def inStream = jarfile.openStream();
                            if (inStream != null) {
                                println(String.format("%s:%s:%s", resolvedDep.module.id.group, resolvedDep.module.id.name, resolvedDep.module.id.version)
                                        + " -> " + jarUrl)
                                jsonOutput += "\n\t{\n"
                                jsonOutput += "\t\t\"jar\":\"${jarUrl}\",\n" +
                                        "\t\t\"name\":\"${resolvedDep.module.id.name} " +
                                        "${resolvedDep.module.id.version}\",\n" +
                                        "\t\t\"src\":\"${sourceUrl}\"\n" +
                                        "\t},"
                                if (resolvedDep.children.size() != 0) {
                                    resolvedDep.children.each { childResolvedDep ->
                                        if (resolvedDep in childResolvedDep.getParents() && childResolvedDep.getConfiguration() == 'compile') {
                                            addToJson(childResolvedDep)
                                        }
                                    }
                                }
                            }
                        } catch (Exception ignored) {
                            println(ignored.getMessage())
                        }
                    }
                }
                addToJson(dep)
            }
            if (jsonOutput[-1] == ',') {
                jsonOutput = jsonOutput[0..-2]
            }
            jsonOutput += "\n]\n}"
            println jsonOutput
            var jsonFile = file("${layout.projectDirectory}/implementationDependencies.json")
            jsonFile.createNewFile()
            jsonFile.write(jsonOutput)
        }
    }
}


spotless {
    // optional: limit format enforcement to just the files changed by this feature branch
//   ratchetFrom 'origin/master'

    format 'misc', {
        // define the files to apply `misc` to
        target '*.gradle', '*.md', '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces() // or tabs. Takes an integer argument if you don't like 4
        endWithNewline()
    }
    java {
        // Inferring targets won't work here
        target '**/*.java'
        // apply a specific flavor of google-java-format
        // googleJavaFormat('1.8').aosp().reflowLongStrings()
        // make sure every file has the following copyright header.
        // optionally, Spotless can set copyright years by digging
        // through git history (see "license" section below)
        // licenseHeader '/* (C)$YEAR */'
    }
}

gradle.projectsEvaluated {
    subprojects {
        test {
            filter {
                setFailOnNoMatchingTests(false)
            }
        }
        tasks.named("build") {
            finalizedBy("generateDependenciesJson")
        }
    }
}
