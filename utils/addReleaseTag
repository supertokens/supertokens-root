#!/bin/bash
# working directory is inside supertokens-*/. Expects a releasePassword file to be ../
# ./addReleaseTag [--forced]
# get version------------
version=`cat build.gradle | grep -e "version =" -e "version="`

while IFS='"' read -ra ADDR; do
	counter=0
	for i in "${ADDR[@]}"; do
		if [ $counter == 1 ]
		then
			version=$i
  		fi
  		counter=$(($counter+1))
	done
done <<< "$version"

branch_name="$(git symbolic-ref HEAD 2>/dev/null)" ||
branch_name="(unnamed branch)"     # detached HEAD

branch_name=${branch_name##refs/heads/}

git fetch --prune --prune-tags

password=`cat ../apiPassword`

# get current package type
if [[ `pwd` == *-core ]]
then
  packageType="core"
elif [[ `pwd` == *-plugin-interface ]]
then
  packageType="plugin-interface"
else
  packageType="plugin"
fi

# we get from the server is the tests have passed or not.
if [[ $packageType == "core" ]]
then
  testPassedJson=`curl -s -X GET \
  "https://api.supertokens.io/0/core?password=$password&planType=FREE&version=$version" \
  -H 'api-version: 0'`
elif [[ $packageType == "plugin" ]]
then
  p_name=`cat ./build.gradle | grep -e "def pluginName =" -e "def pluginName="`
  while IFS='"' read -ra ADDR; do
    counter=0
    for i in "${ADDR[@]}"; do
      if [ $counter == 1 ]
      then
        p_name=$i
        fi
        counter=$(($counter+1))
    done
  done <<< "$p_name"
  testPassedJson=`curl -s -X GET \
  "https://api.supertokens.io/0/plugin?password=$password&planType=FREE&version=$version&name=$p_name" \
  -H 'api-version: 0'`
else
  testPassedJson="ignore"
fi

if [[ $testPassedJson == "ignore" ]]
then
  testPassed="true"
else
  if [[ `echo $testPassedJson | jq .testPassed` == "null"  ]]
  then
    testPassed="false"
  else
    testPassed=`echo $testPassedJson | jq .testPassed`
  fi
fi

if [[ $testPassed != "true" ]]
then
	RED='\033[0;31m'
  NC='\033[0m' # No Color
  printf "${RED}All tests have not passed. So stopping process.${NC}\n"
  exit 1
fi

# we get from the server if the current package can be released safely or not
if [[ $1 != "--forced" ]]
then
  if [[ $packageType == "core" ]]
  then
    canReleaseSafelyResponse=`curl -s -X GET \
    "https://api.supertokens.io/0/core/release/check?password=$password&planType=FREE&version=$version" \
    -H 'api-version: 0'`
  else
    canReleaseSafelyResponse="ignore"
  fi

  if [[ $canReleaseSafelyResponse == "ignore" ]]
  then
    canReleaseSafely="true"
  else
    if [[ `echo $canReleaseSafelyResponse | jq .canRelease` == "null"  ]]
    then
      canReleaseSafely="false"
    else
      canReleaseSafely=`echo $canReleaseSafelyResponse | jq .canRelease`
    fi
  fi

  if [[ $canReleaseSafely != "true" ]]
  then
    RED='\033[0;31m'
    NC='\033[0m' # No Color
    printf "${RED}Cannot release core. Have you released corresponding plugin and drivers?${NC}\n"
    printf "${RED}Proceeding with release anyway.${NC}\n"
  fi
fi

# check that current commit has a dev tag and that it is the correct version
# get current commit hash------------
if [ $# -eq 0 ]
then
	commit_hash=`git log --pretty=format:'%H' -n 1`
else
	commit_hash=$1
fi


# check if current commit already has a tag or not------------
currTag=`git tag -l --points-at $commit_hash`

expectedCurrTag=dev-v$version

if [[ $currTag == $expectedCurrTag ]]
then
	continue=1
else
	RED='\033[0;31m'
	NC='\033[0m'
	printf "${RED}This commit does not have the right tag for the version you want to release.${NC}\n"
	exit 1
fi

releasePassword=`cat ../releasePassword`

# now we call the patch API to make it release mode
if [[ $packageType == "core" ]]
then
  responseStatus=`curl -s -o /dev/null -w "%{http_code}" -X PATCH \
      https://api.supertokens.io/0/core \
      -H 'Content-Type: application/json' \
      -H 'api-version: 0' \
      -d "{
          \"password\": \"$releasePassword\",
          \"planType\":\"FREE\",
          \"version\":\"$version\",
          \"release\": true
      }"`
elif [[ $packageType == "plugin" ]]
then
  responseStatus=`curl -s -o /dev/null -w "%{http_code}" -X PATCH \
      https://api.supertokens.io/0/plugin \
      -H 'Content-Type: application/json' \
      -H 'api-version: 0' \
      -d "{
          \"password\": \"$releasePassword\",
          \"planType\":\"FREE\",
          \"name\":\"$p_name\",
          \"version\":\"$version\",
          \"release\": true
      }"`
else
  responseStatus=200
fi

if [ $responseStatus -ne "200" ]
then
    RED='\033[0;31m'
    NC='\033[0m'
    printf "${RED}patch api failed. Please try again.${NC}\n"
    git tag --delete v$version
    git push --delete origin v$version
    exit 1
fi

git tag --delete $currTag
git push --delete origin $currTag

git tag v$version
git push --tags

if [[ $packageType == "core" ]]
then
  response=`curl -s -X GET \
  "https://api.supertokens.io/0/core/latest/check?password=$password&planType=FREE&version=$version" \
  -H 'api-version: 0'`
  response=`echo $response | jq .isLatest`
elif [[ $packageType == "plugin" ]]
then
  response=`curl -s -X GET \
  "https://api.supertokens.io/0/plugin/latest/check?password=$password&planType=FREE&version=$version&name=$p_name" \
  -H 'api-version: 0'`
  response=`echo $response | jq .isLatest`
else
  response=`curl -s -X GET \
  "https://api.supertokens.io/0/plugin-interface/latest/check?password=$password&planType=FREE&version=$version" \
  -H 'api-version: 0'`
  response=`echo $response | jq .isLatest`
fi

if [[ $response == "null"  ]]
then
  RED='\033[0;31m'
  NC='\033[0m'
  printf "${RED}error while determining if we should push to master or not. Please do so manually if needed:${NC}\n"
  if [[ $branch_name == "(unnamed branch)" ]]
  then
    echo "git checkout -b forrelease"
    echo "git merge master"
    echo "git checkout master"
    echo "git merge forrelease"
    echo "git push"
    echo "git checkout forrelease"
    exit 1
  else
    echo "git merge master"
    echo "git checkout master"
    echo "git merge $branch_name"
    echo "git push"
    echo "git checkout $branch_name"
    exit 1
  fi

fi

if [[ $response == "true" ]]
then
  echo "pushing to master..."
  if [[ $branch_name == "(unnamed branch)" ]]
  then
    git checkout -b forrelease
    git merge master
    git checkout master
    git merge forrelease
    git push
    git checkout forrelease
    echo "Done! Please delete this branch"
  else
    git merge master
    git checkout master
    git merge $branch_name
    git push
    git checkout $branch_name
    echo "Done!"
  fi
fi